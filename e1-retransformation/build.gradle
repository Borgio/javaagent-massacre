apply plugin: 'java'
apply plugin: 'application'

repositories {
    jcenter()
}

dependencies {
    compile project(':toolbox')
    compile project(':workbench')
}

task appJar(type: Jar, dependsOn: ['jar']) {
    archiveName = "busy-application.jar"

    manifest {
        attributes(
            "Main-Class":    "jug.gvsmirnov.javaagent.retransform.BusyApplication",
        )
    }

    from {
        configurations.compile.collect {
            zipTree(it).matching { exclude 'META-INF/**' }
        }
    }

    from zipTree(jar.archivePath)
}

task agentJar(type: Jar, dependsOn: ['jar']) {
    archiveName = "noop-agent.jar"

    manifest {
        attributes(
                "Premain-Class": "jug.gvsmirnov.javaagent.retransform.NoopAgent",
                "Can-Retransform-Classes": "true"
        )
    }
}

// TODO: de-duplicate this

task runBaseline(dependsOn: appJar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
        'app.jar.path': appJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'baseline'
}

task runAgent(dependsOn: [appJar, agentJar], type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'app.jar.path': appJar.archivePath,
            'agent.jar.path': agentJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'agent'
}

task runBaselineAndMonitorRss(dependsOn: appJar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
        'app.jar.path': appJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'baseline-rss'
}

task runAgentAndMonitorRss(dependsOn: [appJar, agentJar], type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'app.jar.path': appJar.archivePath,
            'agent.jar.path': agentJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'agent-rss'
}

task runBaselineAndTrackNativeMemory(dependsOn: appJar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
        'app.jar.path': appJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'baseline-nmt'
}

task runAgentAndTrackNativeMemory(dependsOn: [appJar, agentJar], type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'app.jar.path': appJar.archivePath,
            'agent.jar.path': agentJar.archivePath
    ]

    main = 'jug.gvsmirnov.javaagent.retransform.Setup'
    args 'agent-nmt'
}